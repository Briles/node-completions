{
    "scope": "source.js",
    "completions": [
        {
            "trigger": "net.connect(options[, connectListener])\tnet",
            "contents": "net.connect(${1:options}, ${2:[, connectListener]});$0"
        },
        {
            "trigger": "net.connect(path[, connectListener])\tnet",
            "contents": "net.connect(${1:path}, ${2:[, connectListener]});$0"
        },
        {
            "trigger": "net.connect(port[, host][, connectListener])\tnet",
            "contents": "net.connect(${1:port}, ${2:[, host]}, ${3:[, connectListener]});$0"
        },
        {
            "trigger": "net.createConnection(options[, connectListener])\tnet",
            "contents": "net.createConnection(${1:options}, ${2:[, connectListener]});$0"
        },
        {
            "trigger": "net.createConnection(path[, connectListener])\tnet",
            "contents": "net.createConnection(${1:path}, ${2:[, connectListener]});$0"
        },
        {
            "trigger": "net.createConnection(port[, host][, connectListener])\tnet",
            "contents": "net.createConnection(${1:port}, ${2:[, host]}, ${3:[, connectListener]});$0"
        },
        {
            "trigger": "net.createServer([options][, connectionListener])\tnet",
            "contents": "net.createServer(${1:[, options]}, ${2:[, connectionListener]});$0"
        },
        {
            "trigger": "net.isIP(input)\tnet",
            "contents": "net.isIP(${1:input});$0"
        },
        {
            "trigger": "net.isIPv4(input)\tnet",
            "contents": "net.isIPv4(${1:input});$0"
        },
        {
            "trigger": "net.isIPv6(input)\tnet",
            "contents": "net.isIPv6(${1:input});$0"
        },
        {
            "trigger": "server.address()\tnet",
            "contents": "server.address();$0"
        },
        {
            "trigger": "server.close([callback])\tnet",
            "contents": "server.close(${1:[, callback]});$0"
        },
        {
            "trigger": "server.getConnections(callback)\tnet",
            "contents": "server.getConnections(${1:callback});$0"
        },
        {
            "trigger": "server.listen(handle[, callback])\tnet",
            "contents": "server.listen(${1:handle}, ${2:[, callback]});$0"
        },
        {
            "trigger": "server.listen(options[, callback])\tnet",
            "contents": "server.listen(${1:options}, ${2:[, callback]});$0"
        },
        {
            "trigger": "server.listen(path[, callback])\tnet",
            "contents": "server.listen(${1:path}, ${2:[, callback]});$0"
        },
        {
            "trigger": "server.listen(port[, hostname][, backlog][, callback])\tnet",
            "contents": "server.listen(${1:port}, ${2:[, hostname]}, ${3:[, backlog]}, ${4:[, callback]});$0"
        },
        {
            "trigger": "server.ref()\tnet",
            "contents": "server.ref();$0"
        },
        {
            "trigger": "server.unref()\tnet",
            "contents": "server.unref();$0"
        },
        {
            "trigger": "net.server.connections\tnet",
            "contents": "net.server.connections$0"
        },
        {
            "trigger": "net.server.maxConnections\tnet",
            "contents": "net.server.maxConnections$0"
        },
        {
            "trigger": "close\tnet",
            "contents": "close$0"
        },
        {
            "trigger": "connection\tnet",
            "contents": "connection$0"
        },
        {
            "trigger": "error\tnet",
            "contents": "error$0"
        },
        {
            "trigger": "listening\tnet",
            "contents": "listening$0"
        },
        {
            "trigger": "new net.Socket([options])\tnet",
            "contents": "new net.Socket(${1:[, options]});$0"
        },
        {
            "trigger": "socket.address()\tnet",
            "contents": "socket.address();$0"
        },
        {
            "trigger": "socket.connect(options[, connectListener])\tnet",
            "contents": "socket.connect(${1:options}, ${2:[, connectListener]});$0"
        },
        {
            "trigger": "socket.connect(path[, connectListener])\tnet",
            "contents": "socket.connect(${1:port}, ${2:[, host]}, ${3:[, connectListener]});$0"
        },
        {
            "trigger": "socket.connect(port[, host][, connectListener])\tnet",
            "contents": "socket.connect(${1:port}, ${2:[, host]}, ${3:[, connectListener]});$0"
        },
        {
            "trigger": "socket.destroy()\tnet",
            "contents": "socket.destroy();$0"
        },
        {
            "trigger": "socket.end([data][, encoding])\tnet",
            "contents": "socket.end(${1:[, data]}, ${2:[, encoding]});$0"
        },
        {
            "trigger": "socket.pause()\tnet",
            "contents": "socket.pause();$0"
        },
        {
            "trigger": "socket.ref()\tnet",
            "contents": "socket.ref();$0"
        },
        {
            "trigger": "socket.resume()\tnet",
            "contents": "socket.resume();$0"
        },
        {
            "trigger": "socket.setEncoding([encoding])\tnet",
            "contents": "socket.setEncoding(${1:[, encoding]});$0"
        },
        {
            "trigger": "socket.setKeepAlive([enable][, initialDelay])\tnet",
            "contents": "socket.setKeepAlive(${1:[, enable]}, ${2:[, initialDelay]});$0"
        },
        {
            "trigger": "socket.setNoDelay([noDelay])\tnet",
            "contents": "socket.setNoDelay(${1:[, noDelay]});$0"
        },
        {
            "trigger": "socket.setTimeout(timeout[, callback])\tnet",
            "contents": "socket.setTimeout(${1:timeout}, ${2:[, callback]});$0"
        },
        {
            "trigger": "socket.unref()\tnet",
            "contents": "socket.unref();$0"
        },
        {
            "trigger": "socket.write(data[, encoding][, callback])\tnet",
            "contents": "socket.write(${1:data}, ${2:[, encoding]}, ${3:[, callback]});$0"
        },
        {
            "trigger": "net.socket.bufferSize\tnet",
            "contents": "net.socket.bufferSize$0"
        },
        {
            "trigger": "net.socket.bytesRead\tnet",
            "contents": "net.socket.bytesRead$0"
        },
        {
            "trigger": "net.socket.bytesWritten\tnet",
            "contents": "net.socket.bytesWritten$0"
        },
        {
            "trigger": "net.socket.localAddress\tnet",
            "contents": "net.socket.localAddress$0"
        },
        {
            "trigger": "net.socket.localPort\tnet",
            "contents": "net.socket.localPort$0"
        },
        {
            "trigger": "net.socket.remoteAddress\tnet",
            "contents": "net.socket.remoteAddress$0"
        },
        {
            "trigger": "net.socket.remoteFamily\tnet",
            "contents": "net.socket.remoteFamily$0"
        },
        {
            "trigger": "net.socket.remotePort\tnet",
            "contents": "net.socket.remotePort$0"
        },
        {
            "trigger": "connect\tnet",
            "contents": "connect$0"
        },
        {
            "trigger": "data\tnet",
            "contents": "data$0"
        },
        {
            "trigger": "drain\tnet",
            "contents": "drain$0"
        },
        {
            "trigger": "end\tnet",
            "contents": "end$0"
        },
        {
            "trigger": "lookup\tnet",
            "contents": "lookup$0"
        },
        {
            "trigger": "timeout\tnet",
            "contents": "timeout$0"
        }
    ]
}