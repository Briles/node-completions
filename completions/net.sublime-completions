{
    "scope": "source.js",
    "completions": [
        {
            "trigger": "new net.Server([options][, connectionListener])\tnet",
            "contents": "new net.Server(${1:[, options]}, ${2:[, connectionListener]});$0"
        },
        {
            "trigger": "net.connect()\tnet",
            "contents": "net.connect();$0"
        },
        {
            "trigger": "net.createConnection()\tnet",
            "contents": "net.createConnection();$0"
        },
        {
            "trigger": "net.createServer([options][, connectionListener])\tnet",
            "contents": "net.createServer(${1:[, options]}, ${2:[, connectionListener]});$0"
        },
        {
            "trigger": "net.isIP(input)\tnet",
            "contents": "net.isIP(${1:input});$0"
        },
        {
            "trigger": "net.isIPv4(input)\tnet",
            "contents": "net.isIPv4(${1:input});$0"
        },
        {
            "trigger": "net.isIPv6(input)\tnet",
            "contents": "net.isIPv6(${1:input});$0"
        },
        {
            "trigger": "new net.Socket([options])\tnet",
            "contents": "new net.Socket(${1:[, options]});$0"
        },
        {
            "trigger": "socket.address()\tnet",
            "contents": "socket.address();$0"
        },
        {
            "trigger": "socket.connect()\tnet",
            "contents": "socket.connect();$0"
        },
        {
            "trigger": "socket.destroy([exception])\tnet",
            "contents": "socket.destroy(${1:[, exception]});$0"
        },
        {
            "trigger": "socket.end([data][, encoding])\tnet",
            "contents": "socket.end(${1:[, data]}, ${2:[, encoding]});$0"
        },
        {
            "trigger": "socket.pause()\tnet",
            "contents": "socket.pause();$0"
        },
        {
            "trigger": "socket.ref()\tnet",
            "contents": "socket.ref();$0"
        },
        {
            "trigger": "socket.resume()\tnet",
            "contents": "socket.resume();$0"
        },
        {
            "trigger": "socket.setEncoding([encoding])\tnet",
            "contents": "socket.setEncoding(${1:[, encoding]});$0"
        },
        {
            "trigger": "socket.setKeepAlive([enable][, initialDelay])\tnet",
            "contents": "socket.setKeepAlive(${1:[, enable]}, ${2:[, initialDelay]});$0"
        },
        {
            "trigger": "socket.setNoDelay([noDelay])\tnet",
            "contents": "socket.setNoDelay(${1:[, noDelay]});$0"
        },
        {
            "trigger": "socket.setTimeout(timeout[, callback])\tnet",
            "contents": "socket.setTimeout(${1:timeout}, ${2:[, callback]});$0"
        },
        {
            "trigger": "socket.unref()\tnet",
            "contents": "socket.unref();$0"
        },
        {
            "trigger": "socket.write(data[, encoding][, callback])\tnet",
            "contents": "socket.write(${1:data}, ${2:[, encoding]}, ${3:[, callback]});$0"
        },
        {
            "trigger": "net.socket.bufferSize\tnet",
            "contents": "net.socket.bufferSize$0"
        },
        {
            "trigger": "net.socket.bytesRead\tnet",
            "contents": "net.socket.bytesRead$0"
        },
        {
            "trigger": "net.socket.bytesWritten\tnet",
            "contents": "net.socket.bytesWritten$0"
        },
        {
            "trigger": "net.socket.connecting\tnet",
            "contents": "net.socket.connecting$0"
        },
        {
            "trigger": "net.socket.destroyed\tnet",
            "contents": "net.socket.destroyed$0"
        },
        {
            "trigger": "socket.localAddress\tnet",
            "contents": "socket.localAddress$0"
        },
        {
            "trigger": "net.socket.localPort\tnet",
            "contents": "net.socket.localPort$0"
        },
        {
            "trigger": "net.socket.remoteAddress\tnet",
            "contents": "net.socket.remoteAddress$0"
        },
        {
            "trigger": "net.socket.remoteFamily\tnet",
            "contents": "net.socket.remoteFamily$0"
        },
        {
            "trigger": "net.socket.remotePort\tnet",
            "contents": "net.socket.remotePort$0"
        },
        {
            "trigger": "close\tnet",
            "contents": "close$0"
        },
        {
            "trigger": "connect\tnet",
            "contents": "connect$0"
        },
        {
            "trigger": "data\tnet",
            "contents": "data$0"
        },
        {
            "trigger": "drain\tnet",
            "contents": "drain$0"
        },
        {
            "trigger": "end\tnet",
            "contents": "end$0"
        },
        {
            "trigger": "error\tnet",
            "contents": "error$0"
        },
        {
            "trigger": "lookup\tnet",
            "contents": "lookup$0"
        },
        {
            "trigger": "timeout\tnet",
            "contents": "timeout$0"
        }
    ]
}