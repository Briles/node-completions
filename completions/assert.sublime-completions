{
    "scope": "source.js",
    "completions": [
        {
            "trigger": "assert(value[, message])\tassert",
            "contents": "assert(${1:value}, ${2:[, message]});$0"
        },
        {
            "trigger": "assert.deepEqual(actual, expected[, message])\tassert",
            "contents": "assert.deepEqual(${1:actual}, ${2:expected}, ${3:[, message]});$0"
        },
        {
            "trigger": "assert.deepStrictEqual(actual, expected[, message])\tassert",
            "contents": "assert.deepStrictEqual(${1:actual}, ${2:expected}, ${3:[, message]});$0"
        },
        {
            "trigger": "assert.doesNotReject(block[, error][, message])\tassert",
            "contents": "assert.doesNotReject(${1:block}, ${2:[, error]}, ${3:[, message]});$0"
        },
        {
            "trigger": "assert.doesNotThrow(block[, error][, message])\tassert",
            "contents": "assert.doesNotThrow(${1:block}, ${2:[, error]}, ${3:[, message]});$0"
        },
        {
            "trigger": "assert.equal(actual, expected[, message])\tassert",
            "contents": "assert.equal(${1:actual}, ${2:expected}, ${3:[, message]});$0"
        },
        {
            "trigger": "assert.fail([message])\tassert",
            "contents": "assert.fail(${1:[, message]});$0"
        },
        {
            "trigger": "assert.fail(actual, expected[, message[, operator[, stackStartFn]]])\tassert",
            "contents": "assert.fail(${1:actual}, ${2:expected}, ${3:[, message]}, ${4:[, operator]}, ${5:[, stackStartFn]});$0"
        },
        {
            "trigger": "assert.ifError(value)\tassert",
            "contents": "assert.ifError(${1:value});$0"
        },
        {
            "trigger": "assert.notDeepEqual(actual, expected[, message])\tassert",
            "contents": "assert.notDeepEqual(${1:actual}, ${2:expected}, ${3:[, message]});$0"
        },
        {
            "trigger": "assert.notDeepStrictEqual(actual, expected[, message])\tassert",
            "contents": "assert.notDeepStrictEqual(${1:actual}, ${2:expected}, ${3:[, message]});$0"
        },
        {
            "trigger": "assert.notEqual(actual, expected[, message])\tassert",
            "contents": "assert.notEqual(${1:actual}, ${2:expected}, ${3:[, message]});$0"
        },
        {
            "trigger": "assert.notStrictEqual(actual, expected[, message])\tassert",
            "contents": "assert.notStrictEqual(${1:actual}, ${2:expected}, ${3:[, message]});$0"
        },
        {
            "trigger": "assert.ok(value[, message])\tassert",
            "contents": "assert.ok(${1:value}, ${2:[, message]});$0"
        },
        {
            "trigger": "assert.rejects(block[, error][, message])\tassert",
            "contents": "assert.rejects(${1:block}, ${2:[, error]}, ${3:[, message]});$0"
        },
        {
            "trigger": "assert.strictEqual(actual, expected[, message])\tassert",
            "contents": "assert.strictEqual(${1:actual}, ${2:expected}, ${3:[, message]});$0"
        },
        {
            "trigger": "assert.throws(block[, error][, message])\tassert",
            "contents": "assert.throws(${1:block}, ${2:[, error]}, ${3:[, message]});$0"
        }
    ]
}