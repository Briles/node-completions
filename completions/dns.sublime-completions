{
    "scope": "source.js",
    "completions": [
        {
            "trigger": "dns.getServers()\tdns",
            "contents": "dns.getServers();$0"
        },
        {
            "trigger": "dns.lookup(hostname[, options], callback)\tdns",
            "contents": "dns.lookup(${1:hostname}, ${2:[, options]}, ${3:callback});$0"
        },
        {
            "trigger": "dns.lookupService(address, port, callback)\tdns",
            "contents": "dns.lookupService(${1:address}, ${2:port}, ${3:callback});$0"
        },
        {
            "trigger": "dns.resolve(hostname[, rrtype], callback)\tdns",
            "contents": "dns.resolve(${1:hostname}, ${2:[, rrtype]}, ${3:callback});$0"
        },
        {
            "trigger": "dns.resolve4(hostname[, options], callback)\tdns",
            "contents": "dns.resolve4(${1:hostname}, ${2:[, options]}, ${3:callback});$0"
        },
        {
            "trigger": "dns.resolve6(hostname[, options], callback)\tdns",
            "contents": "dns.resolve6(${1:hostname}, ${2:[, options]}, ${3:callback});$0"
        },
        {
            "trigger": "dns.resolveAny(hostname, callback)\tdns",
            "contents": "dns.resolveAny(${1:hostname}, ${2:callback});$0"
        },
        {
            "trigger": "dns.resolveCname(hostname, callback)\tdns",
            "contents": "dns.resolveCname(${1:hostname}, ${2:callback});$0"
        },
        {
            "trigger": "dns.resolveMx(hostname, callback)\tdns",
            "contents": "dns.resolveMx(${1:hostname}, ${2:callback});$0"
        },
        {
            "trigger": "dns.resolveNaptr(hostname, callback)\tdns",
            "contents": "dns.resolveNaptr(${1:hostname}, ${2:callback});$0"
        },
        {
            "trigger": "dns.resolveNs(hostname, callback)\tdns",
            "contents": "dns.resolveNs(${1:hostname}, ${2:callback});$0"
        },
        {
            "trigger": "dns.resolvePtr(hostname, callback)\tdns",
            "contents": "dns.resolvePtr(${1:hostname}, ${2:callback});$0"
        },
        {
            "trigger": "dns.resolveSoa(hostname, callback)\tdns",
            "contents": "dns.resolveSoa(${1:hostname}, ${2:callback});$0"
        },
        {
            "trigger": "dns.resolveSrv(hostname, callback)\tdns",
            "contents": "dns.resolveSrv(${1:hostname}, ${2:callback});$0"
        },
        {
            "trigger": "dns.resolveTxt(hostname, callback)\tdns",
            "contents": "dns.resolveTxt(${1:hostname}, ${2:callback});$0"
        },
        {
            "trigger": "dns.reverse(ip, callback)\tdns",
            "contents": "dns.reverse(${1:ip}, ${2:callback});$0"
        },
        {
            "trigger": "dns.setServers(servers)\tdns",
            "contents": "dns.setServers(${1:servers});$0"
        },
        {
            "trigger": "resolver.cancel()\tdns",
            "contents": "resolver.cancel();$0"
        },
        {
            "trigger": "dnsPromises.getServers()\tdns",
            "contents": "dnsPromises.getServers();$0"
        },
        {
            "trigger": "dnsPromises.lookup(hostname[, options])\tdns",
            "contents": "dnsPromises.lookup(${1:hostname}, ${2:[, options]});$0"
        },
        {
            "trigger": "dnsPromises.lookupService(address, port)\tdns",
            "contents": "dnsPromises.lookupService(${1:address}, ${2:port});$0"
        },
        {
            "trigger": "dnsPromises.resolve(hostname[, rrtype])\tdns",
            "contents": "dnsPromises.resolve(${1:hostname}, ${2:[, rrtype]});$0"
        },
        {
            "trigger": "dnsPromises.resolve4(hostname[, options])\tdns",
            "contents": "dnsPromises.resolve4(${1:hostname}, ${2:[, options]});$0"
        },
        {
            "trigger": "dnsPromises.resolve6(hostname[, options])\tdns",
            "contents": "dnsPromises.resolve6(${1:hostname}, ${2:[, options]});$0"
        },
        {
            "trigger": "dnsPromises.resolveAny(hostname)\tdns",
            "contents": "dnsPromises.resolveAny(${1:hostname});$0"
        },
        {
            "trigger": "dnsPromises.resolveCname(hostname)\tdns",
            "contents": "dnsPromises.resolveCname(${1:hostname});$0"
        },
        {
            "trigger": "dnsPromises.resolveMx(hostname)\tdns",
            "contents": "dnsPromises.resolveMx(${1:hostname});$0"
        },
        {
            "trigger": "dnsPromises.resolveNaptr(hostname)\tdns",
            "contents": "dnsPromises.resolveNaptr(${1:hostname});$0"
        },
        {
            "trigger": "dnsPromises.resolveNs(hostname)\tdns",
            "contents": "dnsPromises.resolveNs(${1:hostname});$0"
        },
        {
            "trigger": "dnsPromises.resolvePtr(hostname)\tdns",
            "contents": "dnsPromises.resolvePtr(${1:hostname});$0"
        },
        {
            "trigger": "dnsPromises.resolveSoa(hostname)\tdns",
            "contents": "dnsPromises.resolveSoa(${1:hostname});$0"
        },
        {
            "trigger": "dnsPromises.resolveSrv(hostname)\tdns",
            "contents": "dnsPromises.resolveSrv(${1:hostname});$0"
        },
        {
            "trigger": "dnsPromises.resolveTxt(hostname)\tdns",
            "contents": "dnsPromises.resolveTxt(${1:hostname});$0"
        },
        {
            "trigger": "dnsPromises.reverse(ip)\tdns",
            "contents": "dnsPromises.reverse(${1:ip});$0"
        },
        {
            "trigger": "dnsPromises.setServers(servers)\tdns",
            "contents": "dnsPromises.setServers(${1:servers});$0"
        }
    ]
}