{
    "scope": "source.js",
    "completions": [
        {
            "trigger": "zlib.createBrotliCompress([options])\tzlib",
            "contents": "zlib.createBrotliCompress(${1:[, options]});$0"
        },
        {
            "trigger": "zlib.createBrotliDecompress([options])\tzlib",
            "contents": "zlib.createBrotliDecompress(${1:[, options]});$0"
        },
        {
            "trigger": "zlib.createDeflate([options])\tzlib",
            "contents": "zlib.createDeflate(${1:[, options]});$0"
        },
        {
            "trigger": "zlib.createDeflateRaw([options])\tzlib",
            "contents": "zlib.createDeflateRaw(${1:[, options]});$0"
        },
        {
            "trigger": "zlib.createGunzip([options])\tzlib",
            "contents": "zlib.createGunzip(${1:[, options]});$0"
        },
        {
            "trigger": "zlib.createGzip([options])\tzlib",
            "contents": "zlib.createGzip(${1:[, options]});$0"
        },
        {
            "trigger": "zlib.createInflate([options])\tzlib",
            "contents": "zlib.createInflate(${1:[, options]});$0"
        },
        {
            "trigger": "zlib.createInflateRaw([options])\tzlib",
            "contents": "zlib.createInflateRaw(${1:[, options]});$0"
        },
        {
            "trigger": "zlib.createUnzip([options])\tzlib",
            "contents": "zlib.createUnzip(${1:[, options]});$0"
        },
        {
            "trigger": "zlib.brotliCompress(buffer[, options], callback)\tzlib",
            "contents": "zlib.brotliCompress(${1:buffer}, ${2:[, options]}, ${3:callback});$0"
        },
        {
            "trigger": "zlib.brotliCompressSync(buffer[, options])\tzlib",
            "contents": "zlib.brotliCompressSync(${1:buffer}, ${2:[, options]});$0"
        },
        {
            "trigger": "zlib.brotliDecompress(buffer[, options], callback)\tzlib",
            "contents": "zlib.brotliDecompress(${1:buffer}, ${2:[, options]}, ${3:callback});$0"
        },
        {
            "trigger": "zlib.brotliDecompressSync(buffer[, options])\tzlib",
            "contents": "zlib.brotliDecompressSync(${1:buffer}, ${2:[, options]});$0"
        },
        {
            "trigger": "zlib.deflate(buffer[, options], callback)\tzlib",
            "contents": "zlib.deflate(${1:buffer}, ${2:[, options]}, ${3:callback});$0"
        },
        {
            "trigger": "zlib.deflateSync(buffer[, options])\tzlib",
            "contents": "zlib.deflateSync(${1:buffer}, ${2:[, options]});$0"
        },
        {
            "trigger": "zlib.deflateRaw(buffer[, options], callback)\tzlib",
            "contents": "zlib.deflateRaw(${1:buffer}, ${2:[, options]}, ${3:callback});$0"
        },
        {
            "trigger": "zlib.deflateRawSync(buffer[, options])\tzlib",
            "contents": "zlib.deflateRawSync(${1:buffer}, ${2:[, options]});$0"
        },
        {
            "trigger": "zlib.gunzip(buffer[, options], callback)\tzlib",
            "contents": "zlib.gunzip(${1:buffer}, ${2:[, options]}, ${3:callback});$0"
        },
        {
            "trigger": "zlib.gunzipSync(buffer[, options])\tzlib",
            "contents": "zlib.gunzipSync(${1:buffer}, ${2:[, options]});$0"
        },
        {
            "trigger": "zlib.gzip(buffer[, options], callback)\tzlib",
            "contents": "zlib.gzip(${1:buffer}, ${2:[, options]}, ${3:callback});$0"
        },
        {
            "trigger": "zlib.gzipSync(buffer[, options])\tzlib",
            "contents": "zlib.gzipSync(${1:buffer}, ${2:[, options]});$0"
        },
        {
            "trigger": "zlib.inflate(buffer[, options], callback)\tzlib",
            "contents": "zlib.inflate(${1:buffer}, ${2:[, options]}, ${3:callback});$0"
        },
        {
            "trigger": "zlib.inflateSync(buffer[, options])\tzlib",
            "contents": "zlib.inflateSync(${1:buffer}, ${2:[, options]});$0"
        },
        {
            "trigger": "zlib.inflateRaw(buffer[, options], callback)\tzlib",
            "contents": "zlib.inflateRaw(${1:buffer}, ${2:[, options]}, ${3:callback});$0"
        },
        {
            "trigger": "zlib.inflateRawSync(buffer[, options])\tzlib",
            "contents": "zlib.inflateRawSync(${1:buffer}, ${2:[, options]});$0"
        },
        {
            "trigger": "zlib.unzip(buffer[, options], callback)\tzlib",
            "contents": "zlib.unzip(${1:buffer}, ${2:[, options]}, ${3:callback});$0"
        },
        {
            "trigger": "zlib.unzipSync(buffer[, options])\tzlib",
            "contents": "zlib.unzipSync(${1:buffer}, ${2:[, options]});$0"
        },
        {
            "trigger": "zlib.close([callback])\tzlib",
            "contents": "zlib.close(${1:[, callback]});$0"
        },
        {
            "trigger": "zlib.flush([kind, ]callback)\tzlib",
            "contents": "zlib.flush(${1:[, kind]}, ${2:callback});$0"
        },
        {
            "trigger": "zlib.params(level, strategy, callback)\tzlib",
            "contents": "zlib.params(${1:level}, ${2:strategy}, ${3:callback});$0"
        },
        {
            "trigger": "zlib.reset()\tzlib",
            "contents": "zlib.reset();$0"
        },
        {
            "trigger": "zlib.zlibbase.bytesRead\tzlib",
            "contents": "zlib.zlibbase.bytesRead$0"
        },
        {
            "trigger": "zlib.bytesWritten\tzlib",
            "contents": "zlib.bytesWritten$0"
        },
        {
            "trigger": "zlib.constants\tzlib",
            "contents": "zlib.constants$0"
        }
    ]
}