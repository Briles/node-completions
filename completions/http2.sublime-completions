{
    "scope": "source.js",
    "completions": [
        {
            "trigger": "http2.createServer(options[, onRequestHandler])\thttp/2",
            "contents": "http2.createServer(${1:options}, ${2:[, onRequestHandler]});$0"
        },
        {
            "trigger": "http2.createSecureServer(options[, onRequestHandler])\thttp/2",
            "contents": "http2.createSecureServer(${1:options}, ${2:[, onRequestHandler]});$0"
        },
        {
            "trigger": "http2.connect(authority[, options][, listener])\thttp/2",
            "contents": "http2.connect(${1:authority}, ${2:[, options]}, ${3:[, listener]});$0"
        },
        {
            "trigger": "http2.getDefaultSettings()\thttp/2",
            "contents": "http2.getDefaultSettings();$0"
        },
        {
            "trigger": "http2.getPackedSettings(settings)\thttp/2",
            "contents": "http2.getPackedSettings(${1:settings});$0"
        },
        {
            "trigger": "http2.getUnpackedSettings(buf)\thttp/2",
            "contents": "http2.getUnpackedSettings(${1:buf});$0"
        },
        {
            "trigger": "core_api.constants\thttp/2",
            "contents": "core_api.constants$0"
        },
        {
            "trigger": "http2session.close([callback])\thttp/2",
            "contents": "http2session.close(${1:[, callback]});$0"
        },
        {
            "trigger": "http2session.destroy([error][, code])\thttp/2",
            "contents": "http2session.destroy(${1:[, error]}, ${2:[, code]});$0"
        },
        {
            "trigger": "http2session.goaway([code[, lastStreamID[, opaqueData]]])\thttp/2",
            "contents": "http2session.goaway(${1:[, code]}, ${2:[, lastStreamID]}, ${3:[, opaqueData]});$0"
        },
        {
            "trigger": "http2session.ping([payload, ]callback)\thttp/2",
            "contents": "http2session.ping(${1:[, payload]}, ${2:callback});$0"
        },
        {
            "trigger": "http2session.ref()\thttp/2",
            "contents": "http2session.ref();$0"
        },
        {
            "trigger": "http2session.setTimeout(msecs, callback)\thttp/2",
            "contents": "http2session.setTimeout(${1:msecs}, ${2:callback});$0"
        },
        {
            "trigger": "http2session.settings(settings)\thttp/2",
            "contents": "http2session.settings(${1:settings});$0"
        },
        {
            "trigger": "http2session.unref()\thttp/2",
            "contents": "http2session.unref();$0"
        },
        {
            "trigger": "http2session.alpnProtocol\thttp/2",
            "contents": "http2session.alpnProtocol$0"
        },
        {
            "trigger": "http2session.closed\thttp/2",
            "contents": "http2session.closed$0"
        },
        {
            "trigger": "http2session.connecting\thttp/2",
            "contents": "http2session.connecting$0"
        },
        {
            "trigger": "http2session.destroyed\thttp/2",
            "contents": "http2session.destroyed$0"
        },
        {
            "trigger": "http2session.encrypted\thttp/2",
            "contents": "http2session.encrypted$0"
        },
        {
            "trigger": "http2session.localSettings\thttp/2",
            "contents": "http2session.localSettings$0"
        },
        {
            "trigger": "http2session.originSet\thttp/2",
            "contents": "http2session.originSet$0"
        },
        {
            "trigger": "http2session.pendingSettingsAck\thttp/2",
            "contents": "http2session.pendingSettingsAck$0"
        },
        {
            "trigger": "http2session.remoteSettings\thttp/2",
            "contents": "http2session.remoteSettings$0"
        },
        {
            "trigger": "net.Socket\thttp/2",
            "contents": "net.Socket$0"
        },
        {
            "trigger": "http2session.state\thttp/2",
            "contents": "http2session.state$0"
        },
        {
            "trigger": "http2session.type\thttp/2",
            "contents": "http2session.type$0"
        },
        {
            "trigger": "close\thttp/2",
            "contents": "close$0"
        },
        {
            "trigger": "connect\thttp/2",
            "contents": "connect$0"
        },
        {
            "trigger": "error\thttp/2",
            "contents": "error$0"
        },
        {
            "trigger": "frameError\thttp/2",
            "contents": "frameError$0"
        },
        {
            "trigger": "goaway\thttp/2",
            "contents": "goaway$0"
        },
        {
            "trigger": "localSettings\thttp/2",
            "contents": "localSettings$0"
        },
        {
            "trigger": "ping\thttp/2",
            "contents": "ping$0"
        },
        {
            "trigger": "remoteSettings\thttp/2",
            "contents": "remoteSettings$0"
        },
        {
            "trigger": "stream\thttp/2",
            "contents": "stream$0"
        },
        {
            "trigger": "timeout\thttp/2",
            "contents": "timeout$0"
        },
        {
            "trigger": "serverhttp2session.altsvc(alt, originOrStream)\thttp/2",
            "contents": "serverhttp2session.altsvc(${1:alt}, ${2:originOrStream});$0"
        },
        {
            "trigger": "serverhttp2session.origin(...origins)\thttp/2",
            "contents": "serverhttp2session.origin(${1:...origins});$0"
        },
        {
            "trigger": "clienthttp2session.request(headers[, options])\thttp/2",
            "contents": "clienthttp2session.request(${1:headers}, ${2:[, options]});$0"
        },
        {
            "trigger": "altsvc\thttp/2",
            "contents": "altsvc$0"
        },
        {
            "trigger": "origin\thttp/2",
            "contents": "origin$0"
        },
        {
            "trigger": "http2stream.close(code[, callback])\thttp/2",
            "contents": "http2stream.close(${1:code}, ${2:[, callback]});$0"
        },
        {
            "trigger": "http2stream.priority(options)\thttp/2",
            "contents": "http2stream.priority(${1:options});$0"
        },
        {
            "trigger": "http2stream.setTimeout(msecs, callback)\thttp/2",
            "contents": "http2stream.setTimeout(${1:msecs}, ${2:callback});$0"
        },
        {
            "trigger": "http2stream.sendTrailers(headers)\thttp/2",
            "contents": "http2stream.sendTrailers(${1:headers});$0"
        },
        {
            "trigger": "http2stream.aborted\thttp/2",
            "contents": "http2stream.aborted$0"
        },
        {
            "trigger": "Socket.bufferSize\thttp/2",
            "contents": "Socket.bufferSize$0"
        },
        {
            "trigger": "http2stream.closed\thttp/2",
            "contents": "http2stream.closed$0"
        },
        {
            "trigger": "http2stream.destroyed\thttp/2",
            "contents": "http2stream.destroyed$0"
        },
        {
            "trigger": "http2stream.endAfterHeaders\thttp/2",
            "contents": "http2stream.endAfterHeaders$0"
        },
        {
            "trigger": "http2stream.pending\thttp/2",
            "contents": "http2stream.pending$0"
        },
        {
            "trigger": "http2stream.rstCode\thttp/2",
            "contents": "http2stream.rstCode$0"
        },
        {
            "trigger": "http2stream.sentHeaders\thttp/2",
            "contents": "http2stream.sentHeaders$0"
        },
        {
            "trigger": "http2stream.sentInfoHeaders\thttp/2",
            "contents": "http2stream.sentInfoHeaders$0"
        },
        {
            "trigger": "http2stream.sentTrailers\thttp/2",
            "contents": "http2stream.sentTrailers$0"
        },
        {
            "trigger": "http2stream.session\thttp/2",
            "contents": "http2stream.session$0"
        },
        {
            "trigger": "http2stream.state\thttp/2",
            "contents": "http2stream.state$0"
        },
        {
            "trigger": "aborted\thttp/2",
            "contents": "aborted$0"
        },
        {
            "trigger": "trailers\thttp/2",
            "contents": "trailers$0"
        },
        {
            "trigger": "wantTrailers\thttp/2",
            "contents": "wantTrailers$0"
        },
        {
            "trigger": "continue\thttp/2",
            "contents": "continue$0"
        },
        {
            "trigger": "headers\thttp/2",
            "contents": "headers$0"
        },
        {
            "trigger": "push\thttp/2",
            "contents": "push$0"
        },
        {
            "trigger": "response\thttp/2",
            "contents": "response$0"
        },
        {
            "trigger": "http2stream.additionalHeaders(headers)\thttp/2",
            "contents": "http2stream.additionalHeaders(${1:headers});$0"
        },
        {
            "trigger": "http2stream.pushStream(headers[, options], callback)\thttp/2",
            "contents": "http2stream.pushStream(${1:headers}, ${2:[, options]}, ${3:callback});$0"
        },
        {
            "trigger": "http2stream.respond([headers[, options]])\thttp/2",
            "contents": "http2stream.respond(${1:[, headers]}, ${2:[, options]});$0"
        },
        {
            "trigger": "http2stream.respondWithFD(fd[, headers[, options]])\thttp/2",
            "contents": "http2stream.respondWithFD(${1:fd}, ${2:[, headers]}, ${3:[, options]});$0"
        },
        {
            "trigger": "http2stream.respondWithFile(path[, headers[, options]])\thttp/2",
            "contents": "http2stream.respondWithFile(${1:path}, ${2:[, headers]}, ${3:[, options]});$0"
        },
        {
            "trigger": "serverhttp2stream.headersSent\thttp/2",
            "contents": "serverhttp2stream.headersSent$0"
        },
        {
            "trigger": "serverhttp2stream.pushAllowed\thttp/2",
            "contents": "serverhttp2stream.pushAllowed$0"
        },
        {
            "trigger": "server.close([callback])\thttp/2",
            "contents": "server.close(${1:[, callback]});$0"
        },
        {
            "trigger": "server.setTimeout([msecs][, callback])\thttp/2",
            "contents": "server.setTimeout(${1:[, msecs]}, ${2:[, callback]});$0"
        },
        {
            "trigger": "checkContinue\thttp/2",
            "contents": "checkContinue$0"
        },
        {
            "trigger": "request\thttp/2",
            "contents": "request$0"
        },
        {
            "trigger": "session\thttp/2",
            "contents": "session$0"
        },
        {
            "trigger": "sessionError\thttp/2",
            "contents": "sessionError$0"
        },
        {
            "trigger": "unknownProtocol\thttp/2",
            "contents": "unknownProtocol$0"
        },
        {
            "trigger": "request.destroy([error])\thttp/2",
            "contents": "request.destroy(${1:[, error]});$0"
        },
        {
            "trigger": "request.setTimeout(msecs, callback)\thttp/2",
            "contents": "request.setTimeout(${1:msecs}, ${2:callback});$0"
        },
        {
            "trigger": "request.aborted\thttp/2",
            "contents": "request.aborted$0"
        },
        {
            "trigger": "http2.http2serverrequest.authority\thttp/2",
            "contents": "http2.http2serverrequest.authority$0"
        },
        {
            "trigger": "request.headers\thttp/2",
            "contents": "request.headers$0"
        },
        {
            "trigger": "message.httpVersion\thttp/2",
            "contents": "message.httpVersion$0"
        },
        {
            "trigger": "http2.http2serverrequest.method\thttp/2",
            "contents": "http2.http2serverrequest.method$0"
        },
        {
            "trigger": "request.rawHeaders\thttp/2",
            "contents": "request.rawHeaders$0"
        },
        {
            "trigger": "http2.http2serverrequest.rawTrailers\thttp/2",
            "contents": "http2.http2serverrequest.rawTrailers$0"
        },
        {
            "trigger": "http2.http2serverrequest.scheme\thttp/2",
            "contents": "http2.http2serverrequest.scheme$0"
        },
        {
            "trigger": "http2.http2serverrequest.stream\thttp/2",
            "contents": "http2.http2serverrequest.stream$0"
        },
        {
            "trigger": "http2.http2serverrequest.trailers\thttp/2",
            "contents": "http2.http2serverrequest.trailers$0"
        },
        {
            "trigger": "request.url\thttp/2",
            "contents": "request.url$0"
        },
        {
            "trigger": "response.addTrailers(headers)\thttp/2",
            "contents": "response.addTrailers(${1:headers});$0"
        },
        {
            "trigger": "response.end([data][, encoding][, callback])\thttp/2",
            "contents": "response.end(${1:[, data]}, ${2:[, encoding]}, ${3:[, callback]});$0"
        },
        {
            "trigger": "response.getHeader(name)\thttp/2",
            "contents": "response.getHeader(${1:name});$0"
        },
        {
            "trigger": "response.getHeaderNames()\thttp/2",
            "contents": "response.getHeaderNames();$0"
        },
        {
            "trigger": "response.getHeaders()\thttp/2",
            "contents": "response.getHeaders();$0"
        },
        {
            "trigger": "response.hasHeader(name)\thttp/2",
            "contents": "response.hasHeader(${1:name});$0"
        },
        {
            "trigger": "response.removeHeader(name)\thttp/2",
            "contents": "response.removeHeader(${1:name});$0"
        },
        {
            "trigger": "response.setHeader(name, value)\thttp/2",
            "contents": "response.setHeader(${1:name}, ${2:value});$0"
        },
        {
            "trigger": "response.setTimeout(msecs[, callback])\thttp/2",
            "contents": "response.setTimeout(${1:msecs}, ${2:[, callback]});$0"
        },
        {
            "trigger": "response.write(chunk[, encoding][, callback])\thttp/2",
            "contents": "response.write(${1:chunk}, ${2:[, encoding]}, ${3:[, callback]});$0"
        },
        {
            "trigger": "response.writeContinue()\thttp/2",
            "contents": "response.writeContinue();$0"
        },
        {
            "trigger": "response.writeHead(statusCode[, statusMessage][, headers])\thttp/2",
            "contents": "response.writeHead(${1:statusCode}, ${2:[, statusMessage]}, ${3:[, headers]});$0"
        },
        {
            "trigger": "response.createPushResponse(headers, callback)\thttp/2",
            "contents": "response.createPushResponse(${1:headers}, ${2:callback});$0"
        },
        {
            "trigger": "http2.http2serverresponse.connection\thttp/2",
            "contents": "http2.http2serverresponse.connection$0"
        },
        {
            "trigger": "http2.http2serverresponse.finished\thttp/2",
            "contents": "http2.http2serverresponse.finished$0"
        },
        {
            "trigger": "http2.http2serverresponse.headersSent\thttp/2",
            "contents": "http2.http2serverresponse.headersSent$0"
        },
        {
            "trigger": "http2.http2serverresponse.sendDate\thttp/2",
            "contents": "http2.http2serverresponse.sendDate$0"
        },
        {
            "trigger": "response.statusCode\thttp/2",
            "contents": "response.statusCode$0"
        },
        {
            "trigger": "http2.http2serverresponse.statusMessage\thttp/2",
            "contents": "http2.http2serverresponse.statusMessage$0"
        },
        {
            "trigger": "http2.http2serverresponse.stream\thttp/2",
            "contents": "http2.http2serverresponse.stream$0"
        },
        {
            "trigger": "finish\thttp/2",
            "contents": "finish$0"
        }
    ]
}