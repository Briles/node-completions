{
    "scope": "source.js",
    "completions": [
        {
            "trigger": "fs.access(path[, mode], callback)\tfs",
            "contents": "fs.access(${1:path}, ${2:[, mode]}, ${3:callback});$0"
        },
        {
            "trigger": "fs.accessSync(path[, mode])\tfs",
            "contents": "fs.accessSync(${1:path}, ${2:[, mode]});$0"
        },
        {
            "trigger": "fs.appendFile(path, data[, options], callback)\tfs",
            "contents": "fs.appendFile(${1:path}, ${2:data}, ${3:[, options]}, ${4:callback});$0"
        },
        {
            "trigger": "fs.appendFileSync(path, data[, options])\tfs",
            "contents": "fs.appendFileSync(${1:path}, ${2:data}, ${3:[, options]});$0"
        },
        {
            "trigger": "fs.chmod(path, mode, callback)\tfs",
            "contents": "fs.chmod(${1:path}, ${2:mode}, ${3:callback});$0"
        },
        {
            "trigger": "fs.chmodSync(path, mode)\tfs",
            "contents": "fs.chmodSync(${1:path}, ${2:mode});$0"
        },
        {
            "trigger": "fs.chown(path, uid, gid, callback)\tfs",
            "contents": "fs.chown(${1:path}, ${2:uid}, ${3:gid}, ${4:callback});$0"
        },
        {
            "trigger": "fs.chownSync(path, uid, gid)\tfs",
            "contents": "fs.chownSync(${1:path}, ${2:uid}, ${3:gid});$0"
        },
        {
            "trigger": "fs.close(fd, callback)\tfs",
            "contents": "fs.close(${1:fd}, ${2:callback});$0"
        },
        {
            "trigger": "fs.closeSync(fd)\tfs",
            "contents": "fs.closeSync(${1:fd});$0"
        },
        {
            "trigger": "fs.copyFile(src, dest[, flags], callback)\tfs",
            "contents": "fs.copyFile(${1:src}, ${2:dest}, ${3:[, flags]}, ${4:callback});$0"
        },
        {
            "trigger": "fs.copyFileSync(src, dest[, flags])\tfs",
            "contents": "fs.copyFileSync(${1:src}, ${2:dest}, ${3:[, flags]});$0"
        },
        {
            "trigger": "fs.createReadStream(path[, options])\tfs",
            "contents": "fs.createReadStream(${1:path}, ${2:[, options]});$0"
        },
        {
            "trigger": "fs.createWriteStream(path[, options])\tfs",
            "contents": "fs.createWriteStream(${1:path}, ${2:[, options]});$0"
        },
        {
            "trigger": "fs.exists(path, callback)\tfs",
            "contents": "fs.exists(${1:path}, ${2:callback});$0"
        },
        {
            "trigger": "fs.existsSync(path)\tfs",
            "contents": "fs.existsSync(${1:path});$0"
        },
        {
            "trigger": "fs.fchmod(fd, mode, callback)\tfs",
            "contents": "fs.fchmod(${1:fd}, ${2:mode}, ${3:callback});$0"
        },
        {
            "trigger": "fs.fchmodSync(fd, mode)\tfs",
            "contents": "fs.fchmodSync(${1:fd}, ${2:mode});$0"
        },
        {
            "trigger": "fs.fchown(fd, uid, gid, callback)\tfs",
            "contents": "fs.fchown(${1:fd}, ${2:uid}, ${3:gid}, ${4:callback});$0"
        },
        {
            "trigger": "fs.fchownSync(fd, uid, gid)\tfs",
            "contents": "fs.fchownSync(${1:fd}, ${2:uid}, ${3:gid});$0"
        },
        {
            "trigger": "fs.fdatasync(fd, callback)\tfs",
            "contents": "fs.fdatasync(${1:fd}, ${2:callback});$0"
        },
        {
            "trigger": "fs.fdatasyncSync(fd)\tfs",
            "contents": "fs.fdatasyncSync(${1:fd});$0"
        },
        {
            "trigger": "fs.fstat(fd[, options], callback)\tfs",
            "contents": "fs.fstat(${1:fd}, ${2:[, options]}, ${3:callback});$0"
        },
        {
            "trigger": "fs.fstatSync(fd[, options])\tfs",
            "contents": "fs.fstatSync(${1:fd}, ${2:[, options]});$0"
        },
        {
            "trigger": "fs.fsync(fd, callback)\tfs",
            "contents": "fs.fsync(${1:fd}, ${2:callback});$0"
        },
        {
            "trigger": "fs.fsyncSync(fd)\tfs",
            "contents": "fs.fsyncSync(${1:fd});$0"
        },
        {
            "trigger": "fs.ftruncate(fd[, len], callback)\tfs",
            "contents": "fs.ftruncate(${1:fd}, ${2:[, len]}, ${3:callback});$0"
        },
        {
            "trigger": "fs.ftruncateSync(fd[, len])\tfs",
            "contents": "fs.ftruncateSync(${1:fd}, ${2:[, len]});$0"
        },
        {
            "trigger": "fs.futimes(fd, atime, mtime, callback)\tfs",
            "contents": "fs.futimes(${1:fd}, ${2:atime}, ${3:mtime}, ${4:callback});$0"
        },
        {
            "trigger": "fs.futimesSync(fd, atime, mtime)\tfs",
            "contents": "fs.futimesSync(${1:fd}, ${2:atime}, ${3:mtime});$0"
        },
        {
            "trigger": "fs.lchmod(path, mode, callback)\tfs",
            "contents": "fs.lchmod(${1:path}, ${2:mode}, ${3:callback});$0"
        },
        {
            "trigger": "fs.lchmodSync(path, mode)\tfs",
            "contents": "fs.lchmodSync(${1:path}, ${2:mode});$0"
        },
        {
            "trigger": "fs.lchown(path, uid, gid, callback)\tfs",
            "contents": "fs.lchown(${1:path}, ${2:uid}, ${3:gid}, ${4:callback});$0"
        },
        {
            "trigger": "fs.lchownSync(path, uid, gid)\tfs",
            "contents": "fs.lchownSync(${1:path}, ${2:uid}, ${3:gid});$0"
        },
        {
            "trigger": "fs.link(existingPath, newPath, callback)\tfs",
            "contents": "fs.link(${1:existingPath}, ${2:newPath}, ${3:callback});$0"
        },
        {
            "trigger": "fs.linkSync(existingPath, newPath)\tfs",
            "contents": "fs.linkSync(${1:existingPath}, ${2:newPath});$0"
        },
        {
            "trigger": "fs.lstat(path[, options], callback)\tfs",
            "contents": "fs.lstat(${1:path}, ${2:[, options]}, ${3:callback});$0"
        },
        {
            "trigger": "fs.lstatSync(path[, options])\tfs",
            "contents": "fs.lstatSync(${1:path}, ${2:[, options]});$0"
        },
        {
            "trigger": "fs.mkdir(path[, options], callback)\tfs",
            "contents": "fs.mkdir(${1:path}, ${2:[, options]}, ${3:callback});$0"
        },
        {
            "trigger": "fs.mkdirSync(path[, options])\tfs",
            "contents": "fs.mkdirSync(${1:path}, ${2:[, options]});$0"
        },
        {
            "trigger": "fs.mkdtemp(prefix[, options], callback)\tfs",
            "contents": "fs.mkdtemp(${1:prefix}, ${2:[, options]}, ${3:callback});$0"
        },
        {
            "trigger": "fs.mkdtempSync(prefix[, options])\tfs",
            "contents": "fs.mkdtempSync(${1:prefix}, ${2:[, options]});$0"
        },
        {
            "trigger": "fs.open(path[, flags[, mode]], callback)\tfs",
            "contents": "fs.open(${1:path}, ${2:[, flags]}, ${3:[, mode]}, ${4:callback});$0"
        },
        {
            "trigger": "fs.openSync(path[, flags, mode])\tfs",
            "contents": "fs.openSync(${1:path}, ${2:[, flags]}, ${3:[, mode]});$0"
        },
        {
            "trigger": "fs.read(fd, buffer, offset, length, position, callback)\tfs",
            "contents": "fs.read(${1:fd}, ${2:buffer}, ${3:offset}, ${4:length}, ${5:position}, ${6:callback});$0"
        },
        {
            "trigger": "fs.readdir(path[, options], callback)\tfs",
            "contents": "fs.readdir(${1:path}, ${2:[, options]}, ${3:callback});$0"
        },
        {
            "trigger": "fs.readdirSync(path[, options])\tfs",
            "contents": "fs.readdirSync(${1:path}, ${2:[, options]});$0"
        },
        {
            "trigger": "fs.readFile(path[, options], callback)\tfs",
            "contents": "fs.readFile(${1:path}, ${2:[, options]}, ${3:callback});$0"
        },
        {
            "trigger": "fs.readFileSync(path[, options])\tfs",
            "contents": "fs.readFileSync(${1:path}, ${2:[, options]});$0"
        },
        {
            "trigger": "fs.readlink(path[, options], callback)\tfs",
            "contents": "fs.readlink(${1:path}, ${2:[, options]}, ${3:callback});$0"
        },
        {
            "trigger": "fs.readlinkSync(path[, options])\tfs",
            "contents": "fs.readlinkSync(${1:path}, ${2:[, options]});$0"
        },
        {
            "trigger": "fs.readSync(fd, buffer, offset, length, position)\tfs",
            "contents": "fs.readSync(${1:fd}, ${2:buffer}, ${3:offset}, ${4:length}, ${5:position});$0"
        },
        {
            "trigger": "fs.realpath(path[, options], callback)\tfs",
            "contents": "fs.realpath(${1:path}, ${2:[, options]}, ${3:callback});$0"
        },
        {
            "trigger": "fs.realpath.native(path[, options], callback)\tfs",
            "contents": "fs.realpath.native(${1:path}, ${2:[, options]}, ${3:callback});$0"
        },
        {
            "trigger": "fs.realpathSync(path[, options])\tfs",
            "contents": "fs.realpathSync(${1:path}, ${2:[, options]});$0"
        },
        {
            "trigger": "fs.realpathSync.native(path[, options])\tfs",
            "contents": "fs.realpathSync.native(${1:path}, ${2:[, options]});$0"
        },
        {
            "trigger": "fs.rename(oldPath, newPath, callback)\tfs",
            "contents": "fs.rename(${1:oldPath}, ${2:newPath}, ${3:callback});$0"
        },
        {
            "trigger": "fs.renameSync(oldPath, newPath)\tfs",
            "contents": "fs.renameSync(${1:oldPath}, ${2:newPath});$0"
        },
        {
            "trigger": "fs.rmdir(path, callback)\tfs",
            "contents": "fs.rmdir(${1:path}, ${2:callback});$0"
        },
        {
            "trigger": "fs.rmdirSync(path)\tfs",
            "contents": "fs.rmdirSync(${1:path});$0"
        },
        {
            "trigger": "fs.stat(path[, options], callback)\tfs",
            "contents": "fs.stat(${1:path}, ${2:[, options]}, ${3:callback});$0"
        },
        {
            "trigger": "fs.statSync(path[, options])\tfs",
            "contents": "fs.statSync(${1:path}, ${2:[, options]});$0"
        },
        {
            "trigger": "fs.symlink(target, path[, type], callback)\tfs",
            "contents": "fs.symlink(${1:target}, ${2:path}, ${3:[, type]}, ${4:callback});$0"
        },
        {
            "trigger": "fs.symlinkSync(target, path[, type])\tfs",
            "contents": "fs.symlinkSync(${1:target}, ${2:path}, ${3:[, type]});$0"
        },
        {
            "trigger": "fs.truncate(path[, len], callback)\tfs",
            "contents": "fs.truncate(${1:path}, ${2:[, len]}, ${3:callback});$0"
        },
        {
            "trigger": "fs.truncateSync(path[, len])\tfs",
            "contents": "fs.truncateSync(${1:path}, ${2:[, len]});$0"
        },
        {
            "trigger": "fs.unlink(path, callback)\tfs",
            "contents": "fs.unlink(${1:path}, ${2:callback});$0"
        },
        {
            "trigger": "fs.unlinkSync(path)\tfs",
            "contents": "fs.unlinkSync(${1:path});$0"
        },
        {
            "trigger": "fs.unwatchFile(filename[, listener])\tfs",
            "contents": "fs.unwatchFile(${1:filename}, ${2:[, listener]});$0"
        },
        {
            "trigger": "fs.utimes(path, atime, mtime, callback)\tfs",
            "contents": "fs.utimes(${1:path}, ${2:atime}, ${3:mtime}, ${4:callback});$0"
        },
        {
            "trigger": "fs.utimesSync(path, atime, mtime)\tfs",
            "contents": "fs.utimesSync(${1:path}, ${2:atime}, ${3:mtime});$0"
        },
        {
            "trigger": "fs.watch(filename[, options][, listener])\tfs",
            "contents": "fs.watch(${1:filename}, ${2:[, options]}, ${3:[, listener]});$0"
        },
        {
            "trigger": "fs.watchFile(filename[, options], listener)\tfs",
            "contents": "fs.watchFile(${1:filename}, ${2:[, options]}, ${3:listener});$0"
        },
        {
            "trigger": "fs.write(fd, buffer[, offset[, length[, position]]], callback)\tfs",
            "contents": "fs.write(${1:fd}, ${2:buffer}, ${3:[, offset]}, ${4:[, length]}, ${5:[, position]}, ${6:callback});$0"
        },
        {
            "trigger": "fs.write(fd, string[, position[, encoding]], callback)\tfs",
            "contents": "fs.write(${1:fd}, ${2:string}, ${3:[, position]}, ${4:[, encoding]}, ${5:callback});$0"
        },
        {
            "trigger": "fs.writeFile(file, data[, options], callback)\tfs",
            "contents": "fs.writeFile(${1:file}, ${2:data}, ${3:[, options]}, ${4:callback});$0"
        },
        {
            "trigger": "fs.writeFileSync(file, data[, options])\tfs",
            "contents": "fs.writeFileSync(${1:file}, ${2:data}, ${3:[, options]});$0"
        },
        {
            "trigger": "fs.writeSync(fd, buffer[, offset[, length[, position]]])\tfs",
            "contents": "fs.writeSync(${1:fd}, ${2:buffer}, ${3:[, offset]}, ${4:[, length]}, ${5:[, position]});$0"
        },
        {
            "trigger": "fs.writeSync(fd, string[, position[, encoding]])\tfs",
            "contents": "fs.writeSync(${1:fd}, ${2:string}, ${3:[, position]}, ${4:[, encoding]});$0"
        },
        {
            "trigger": "dirent.isBlockDevice()\tfs",
            "contents": "dirent.isBlockDevice();$0"
        },
        {
            "trigger": "dirent.isCharacterDevice()\tfs",
            "contents": "dirent.isCharacterDevice();$0"
        },
        {
            "trigger": "dirent.isDirectory()\tfs",
            "contents": "dirent.isDirectory();$0"
        },
        {
            "trigger": "dirent.isFIFO()\tfs",
            "contents": "dirent.isFIFO();$0"
        },
        {
            "trigger": "dirent.isFile()\tfs",
            "contents": "dirent.isFile();$0"
        },
        {
            "trigger": "dirent.isSocket()\tfs",
            "contents": "dirent.isSocket();$0"
        },
        {
            "trigger": "dirent.isSymbolicLink()\tfs",
            "contents": "dirent.isSymbolicLink();$0"
        },
        {
            "trigger": "fs.dirent.name\tfs",
            "contents": "fs.dirent.name$0"
        },
        {
            "trigger": "watcher.close()\tfs",
            "contents": "watcher.close();$0"
        },
        {
            "trigger": "change\tfs",
            "contents": "change$0"
        },
        {
            "trigger": "close\tfs",
            "contents": "close$0"
        },
        {
            "trigger": "error\tfs",
            "contents": "error$0"
        },
        {
            "trigger": "fs.readstream.bytesRead\tfs",
            "contents": "fs.readstream.bytesRead$0"
        },
        {
            "trigger": "readStream.path\tfs",
            "contents": "readStream.path$0"
        },
        {
            "trigger": "open\tfs",
            "contents": "open$0"
        },
        {
            "trigger": "ready\tfs",
            "contents": "ready$0"
        },
        {
            "trigger": "stats.isBlockDevice()\tfs",
            "contents": "stats.isBlockDevice();$0"
        },
        {
            "trigger": "stats.isCharacterDevice()\tfs",
            "contents": "stats.isCharacterDevice();$0"
        },
        {
            "trigger": "stats.isDirectory()\tfs",
            "contents": "stats.isDirectory();$0"
        },
        {
            "trigger": "stats.isFIFO()\tfs",
            "contents": "stats.isFIFO();$0"
        },
        {
            "trigger": "stats.isFile()\tfs",
            "contents": "stats.isFile();$0"
        },
        {
            "trigger": "stats.isSocket()\tfs",
            "contents": "stats.isSocket();$0"
        },
        {
            "trigger": "stats.isSymbolicLink()\tfs",
            "contents": "stats.isSymbolicLink();$0"
        },
        {
            "trigger": "fs.stats.dev\tfs",
            "contents": "fs.stats.dev$0"
        },
        {
            "trigger": "fs.stats.ino\tfs",
            "contents": "fs.stats.ino$0"
        },
        {
            "trigger": "fs.stats.mode\tfs",
            "contents": "fs.stats.mode$0"
        },
        {
            "trigger": "fs.stats.nlink\tfs",
            "contents": "fs.stats.nlink$0"
        },
        {
            "trigger": "fs.stats.uid\tfs",
            "contents": "fs.stats.uid$0"
        },
        {
            "trigger": "fs.stats.gid\tfs",
            "contents": "fs.stats.gid$0"
        },
        {
            "trigger": "fs.stats.rdev\tfs",
            "contents": "fs.stats.rdev$0"
        },
        {
            "trigger": "fs.stats.size\tfs",
            "contents": "fs.stats.size$0"
        },
        {
            "trigger": "fs.stats.blksize\tfs",
            "contents": "fs.stats.blksize$0"
        },
        {
            "trigger": "fs.stats.blocks\tfs",
            "contents": "fs.stats.blocks$0"
        },
        {
            "trigger": "fs.stats.atimeMs\tfs",
            "contents": "fs.stats.atimeMs$0"
        },
        {
            "trigger": "fs.stats.mtimeMs\tfs",
            "contents": "fs.stats.mtimeMs$0"
        },
        {
            "trigger": "fs.stats.ctimeMs\tfs",
            "contents": "fs.stats.ctimeMs$0"
        },
        {
            "trigger": "fs.stats.birthtimeMs\tfs",
            "contents": "fs.stats.birthtimeMs$0"
        },
        {
            "trigger": "fs.stats.atime\tfs",
            "contents": "fs.stats.atime$0"
        },
        {
            "trigger": "fs.stats.mtime\tfs",
            "contents": "fs.stats.mtime$0"
        },
        {
            "trigger": "fs.stats.ctime\tfs",
            "contents": "fs.stats.ctime$0"
        },
        {
            "trigger": "fs.stats.birthtime\tfs",
            "contents": "fs.stats.birthtime$0"
        },
        {
            "trigger": "fs.writestream.bytesWritten\tfs",
            "contents": "fs.writestream.bytesWritten$0"
        },
        {
            "trigger": "writeStream.path\tfs",
            "contents": "writeStream.path$0"
        },
        {
            "trigger": "fs.constants\tfs",
            "contents": "fs.constants$0"
        },
        {
            "trigger": "fsPromises.access(path[, mode])\tfs",
            "contents": "fsPromises.access(${1:path}, ${2:[, mode]});$0"
        },
        {
            "trigger": "fsPromises.appendFile(path, data[, options])\tfs",
            "contents": "fsPromises.appendFile(${1:path}, ${2:data}, ${3:[, options]});$0"
        },
        {
            "trigger": "fsPromises.chmod(path, mode)\tfs",
            "contents": "fsPromises.chmod(${1:path}, ${2:mode});$0"
        },
        {
            "trigger": "fsPromises.chown(path, uid, gid)\tfs",
            "contents": "fsPromises.chown(${1:path}, ${2:uid}, ${3:gid});$0"
        },
        {
            "trigger": "fsPromises.copyFile(src, dest[, flags])\tfs",
            "contents": "fsPromises.copyFile(${1:src}, ${2:dest}, ${3:[, flags]});$0"
        },
        {
            "trigger": "fsPromises.lchmod(path, mode)\tfs",
            "contents": "fsPromises.lchmod(${1:path}, ${2:mode});$0"
        },
        {
            "trigger": "fsPromises.lchown(path, uid, gid)\tfs",
            "contents": "fsPromises.lchown(${1:path}, ${2:uid}, ${3:gid});$0"
        },
        {
            "trigger": "fsPromises.link(existingPath, newPath)\tfs",
            "contents": "fsPromises.link(${1:existingPath}, ${2:newPath});$0"
        },
        {
            "trigger": "fsPromises.lstat(path[, options])\tfs",
            "contents": "fsPromises.lstat(${1:path}, ${2:[, options]});$0"
        },
        {
            "trigger": "fsPromises.mkdir(path[, options])\tfs",
            "contents": "fsPromises.mkdir(${1:path}, ${2:[, options]});$0"
        },
        {
            "trigger": "fsPromises.mkdtemp(prefix[, options])\tfs",
            "contents": "fsPromises.mkdtemp(${1:prefix}, ${2:[, options]});$0"
        },
        {
            "trigger": "fsPromises.open(path, flags[, mode])\tfs",
            "contents": "fsPromises.open(${1:path}, ${2:flags}, ${3:[, mode]});$0"
        },
        {
            "trigger": "fsPromises.readdir(path[, options])\tfs",
            "contents": "fsPromises.readdir(${1:path}, ${2:[, options]});$0"
        },
        {
            "trigger": "fsPromises.readFile(path[, options])\tfs",
            "contents": "fsPromises.readFile(${1:path}, ${2:[, options]});$0"
        },
        {
            "trigger": "fsPromises.readlink(path[, options])\tfs",
            "contents": "fsPromises.readlink(${1:path}, ${2:[, options]});$0"
        },
        {
            "trigger": "fsPromises.realpath(path[, options])\tfs",
            "contents": "fsPromises.realpath(${1:path}, ${2:[, options]});$0"
        },
        {
            "trigger": "fsPromises.rename(oldPath, newPath)\tfs",
            "contents": "fsPromises.rename(${1:oldPath}, ${2:newPath});$0"
        },
        {
            "trigger": "fsPromises.rmdir(path)\tfs",
            "contents": "fsPromises.rmdir(${1:path});$0"
        },
        {
            "trigger": "fsPromises.stat(path[, options])\tfs",
            "contents": "fsPromises.stat(${1:path}, ${2:[, options]});$0"
        },
        {
            "trigger": "fsPromises.symlink(target, path[, type])\tfs",
            "contents": "fsPromises.symlink(${1:target}, ${2:path}, ${3:[, type]});$0"
        },
        {
            "trigger": "fsPromises.truncate(path[, len])\tfs",
            "contents": "fsPromises.truncate(${1:path}, ${2:[, len]});$0"
        },
        {
            "trigger": "fsPromises.unlink(path)\tfs",
            "contents": "fsPromises.unlink(${1:path});$0"
        },
        {
            "trigger": "fsPromises.utimes(path, atime, mtime)\tfs",
            "contents": "fsPromises.utimes(${1:path}, ${2:atime}, ${3:mtime});$0"
        },
        {
            "trigger": "fsPromises.writeFile(file, data[, options])\tfs",
            "contents": "fsPromises.writeFile(${1:file}, ${2:data}, ${3:[, options]});$0"
        },
        {
            "trigger": "filehandle.appendFile(data, options)\tfs",
            "contents": "filehandle.appendFile(${1:data}, ${2:options});$0"
        },
        {
            "trigger": "filehandle.chmod(mode)\tfs",
            "contents": "filehandle.chmod(${1:mode});$0"
        },
        {
            "trigger": "filehandle.chown(uid, gid)\tfs",
            "contents": "filehandle.chown(${1:uid}, ${2:gid});$0"
        },
        {
            "trigger": "filehandle.close()\tfs",
            "contents": "filehandle.close();$0"
        },
        {
            "trigger": "filehandle.datasync()\tfs",
            "contents": "filehandle.datasync();$0"
        },
        {
            "trigger": "filehandle.read(buffer, offset, length, position)\tfs",
            "contents": "filehandle.read(${1:buffer}, ${2:offset}, ${3:length}, ${4:position});$0"
        },
        {
            "trigger": "filehandle.readFile(options)\tfs",
            "contents": "filehandle.readFile(${1:options});$0"
        },
        {
            "trigger": "filehandle.stat([options])\tfs",
            "contents": "filehandle.stat(${1:[, options]});$0"
        },
        {
            "trigger": "filehandle.sync()\tfs",
            "contents": "filehandle.sync();$0"
        },
        {
            "trigger": "filehandle.truncate(len)\tfs",
            "contents": "filehandle.truncate(${1:len});$0"
        },
        {
            "trigger": "filehandle.utimes(atime, mtime)\tfs",
            "contents": "filehandle.utimes(${1:atime}, ${2:mtime});$0"
        },
        {
            "trigger": "filehandle.write(buffer, offset, length, position)\tfs",
            "contents": "filehandle.write(${1:buffer}, ${2:offset}, ${3:length}, ${4:position});$0"
        },
        {
            "trigger": "filehandle.writeFile(data, options)\tfs",
            "contents": "filehandle.writeFile(${1:data}, ${2:options});$0"
        },
        {
            "trigger": "filehandle.fd\tfs",
            "contents": "filehandle.fd$0"
        }
    ]
}